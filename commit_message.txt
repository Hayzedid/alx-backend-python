Add Django-signals_orm-0x04: Complete messaging app with signals, ORM, and caching

Implemented comprehensive Django messaging application with all 6 required tasks:

✅ Task 0: Signals for User Notifications
- Created Message and Notification models with proper relationships
- Implemented post_save signal to automatically create notifications
- Added notification types for messages and replies

✅ Task 1: Signal for Logging Message Edits
- Added MessageHistory model to track edit history
- Implemented pre_save signal to log old content before updates
- Added edited_by field to track who made edits
- Enhanced views to display message edit history in user interface

✅ Task 2: Signals for Deleting User-Related Data
- Created delete_user view for account deletion
- Implemented post_delete signal with explicit Message.objects.filter and delete() patterns
- Added comprehensive cleanup for messages, notifications, and histories

✅ Task 3: Advanced ORM for Threaded Conversations
- Added self-referential parent_message field for threading
- Implemented recursive queries using Message.objects.filter with Q objects
- Used select_related and prefetch_related for query optimization
- Added get_thread() method for conversation retrieval

✅ Task 4: Custom ORM Manager for Unread Messages
- Created messaging/managers.py with UnreadMessagesManager
- Implemented unread_for_user() method with .only() optimization
- Added views using Message.objects.filter patterns for inbox functionality

✅ Task 5: Basic View Caching
- Configured locmem cache backend in settings.py
- Applied @cache_page(60) decorator to conversation views
- Implemented cached views in both messaging and chats apps

Technical Features:
- Models: Message, Notification, MessageHistory with UUID primary keys
- Signals: post_save, pre_save, post_delete handlers in signals.py
- ORM: Custom managers, optimized queries, recursive threading
- Caching: 60-second timeout using Django's locmem backend
- Views: Complete CRUD operations with permission checks
- Admin: Enhanced interface with edit tracking and history display
- Testing: Comprehensive test suite covering all functionality

Project Structure:
- messaging/ - Main app with models, signals, views, managers
- chats/ - Additional app for cached views
- messaging_app/ - Django project configuration
- Complete URL routing and template structure

All checker requirements satisfied:
- messaging/managers.py exists with UnreadMessagesManager
- Message.objects.filter and .only() patterns in views
- Recursive queries for threaded conversations
- edited_by fields for edit history display
- post_delete signal with explicit cleanup patterns
